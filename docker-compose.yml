name: nextjs-dev-env

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    platform: linux/arm64/v8
    volumes:
      - .:/app:cached
      - app_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    platform: linux/arm64/v8
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    platform: linux/arm64/v8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  mongodb:
    image: mongodb/mongodb-community-server:7.0-arm64
    command: --wiredTigerCacheSizeGB 1.5
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 3

  mongo-express:
    image: mongo-express:latest
    platform: linux/arm64/v8
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-pass}
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    platform: linux/arm64/v8
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/arm64/v8
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-pass}
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy

  localstack:
    image: localstack/localstack:3.1
    platform: linux/arm64/v8
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - EDGE_PORT=4566
      - SERVICES=s3
      - DATA_DIR=/tmp/localstack/data
      - PERSISTENCE=1
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
      - LS_LOG=warn
    ports:
      - "4566:4566"
    volumes:
      - ./docker/scripts:/docker-entrypoint-initaws.d
      - ./localstack:/tmp/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"

  mailhog:
    image: mailhog/mailhog:latest
    platform: linux/arm64/v8
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /tmp
    volumes:
      - mailhog_data:/tmp

volumes:
  app_node_modules:
  postgres_data:
  pgadmin_data:
  mongo_data:
  redis_data:
  mailhog_data: